// Code generated for inventory service
// Â© Starship 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alexander-kartavtsev/starship/order/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// Cansel provides a mock function with given fields: ctx, uuid
func (_m *OrderService) Cansel(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Cansel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderService_Cansel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cansel'
type OrderService_Cansel_Call struct {
	*mock.Call
}

// Cansel is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *OrderService_Expecter) Cansel(ctx interface{}, uuid interface{}) *OrderService_Cansel_Call {
	return &OrderService_Cansel_Call{Call: _e.mock.On("Cansel", ctx, uuid)}
}

func (_c *OrderService_Cansel_Call) Run(run func(ctx context.Context, uuid string)) *OrderService_Cansel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_Cansel_Call) Return(_a0 error) *OrderService_Cansel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderService_Cansel_Call) RunAndReturn(run func(context.Context, string) error) *OrderService_Cansel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, info
func (_m *OrderService) Create(ctx context.Context, info model.OrderInfo) (*model.OrderCreateRes, error) {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.OrderCreateRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderInfo) (*model.OrderCreateRes, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderInfo) *model.OrderCreateRes); ok {
		r0 = rf(ctx, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderCreateRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderInfo) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - info model.OrderInfo
func (_e *OrderService_Expecter) Create(ctx interface{}, info interface{}) *OrderService_Create_Call {
	return &OrderService_Create_Call{Call: _e.mock.On("Create", ctx, info)}
}

func (_c *OrderService_Create_Call) Run(run func(ctx context.Context, info model.OrderInfo)) *OrderService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderInfo))
	})
	return _c
}

func (_c *OrderService_Create_Call) Return(_a0 *model.OrderCreateRes, _a1 error) *OrderService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_Create_Call) RunAndReturn(run func(context.Context, model.OrderInfo) (*model.OrderCreateRes, error)) *OrderService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *OrderService) Get(ctx context.Context, uuid string) (model.Order, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *OrderService_Expecter) Get(ctx interface{}, uuid interface{}) *OrderService_Get_Call {
	return &OrderService_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *OrderService_Get_Call) Run(run func(ctx context.Context, uuid string)) *OrderService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_Get_Call) Return(_a0 model.Order, _a1 error) *OrderService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_Get_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Pay provides a mock function with given fields: ctx, uuid, payMethod
func (_m *OrderService) Pay(ctx context.Context, uuid string, payMethod model.PaymentMethod) (string, error) {
	ret := _m.Called(ctx, uuid, payMethod)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.PaymentMethod) (string, error)); ok {
		return rf(ctx, uuid, payMethod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.PaymentMethod) string); ok {
		r0 = rf(ctx, uuid, payMethod)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.PaymentMethod) error); ok {
		r1 = rf(ctx, uuid, payMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type OrderService_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - payMethod model.PaymentMethod
func (_e *OrderService_Expecter) Pay(ctx interface{}, uuid interface{}, payMethod interface{}) *OrderService_Pay_Call {
	return &OrderService_Pay_Call{Call: _e.mock.On("Pay", ctx, uuid, payMethod)}
}

func (_c *OrderService_Pay_Call) Run(run func(ctx context.Context, uuid string, payMethod model.PaymentMethod)) *OrderService_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(model.PaymentMethod))
	})
	return _c
}

func (_c *OrderService_Pay_Call) Return(_a0 string, _a1 error) *OrderService_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_Pay_Call) RunAndReturn(run func(context.Context, string, model.PaymentMethod) (string, error)) *OrderService_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
