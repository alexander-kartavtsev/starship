# ============================
# Stage 1: Build stage
# ============================

# Используем официальный образ Go на базе Alpine — лёгкий, быстрый и безопасный
FROM golang:1.24.6 AS builder

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /order

# Копируем go.mod и go.sum — это позволяет Go правильно загрузить все зависимости
COPY go.mod go.sum ./

# Загружаем все зависимости, указанные в модульных файлах
# Делаем это перед копированием исходного кода для эффективного кэширования Docker слоёв
RUN go mod download

# Копируем весь исходный код приложения
COPY . .

# Собираем бинарный файл weather-сервиса для Linux-архитектуры без CGO
# CGO_ENABLED=0 — отключаем CGO для статической линковки (нет зависимостей от libc)
# GOOS=linux GOARCH=amd64 — явно указываем целевую платформу
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o app ./cmd/main.go

# ============================
# Stage 2: Final image
# ============================

# Используем чистый Alpine образ как итоговый контейнер — он будет лёгким и безопасным
FROM alpine:3.21.3

# Устанавливаем необходимые утилиты для проверки работоспособности
RUN apk add --no-cache curl

# Создаём системного пользователя без root-прав — best practice для безопасности
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Устанавливаем рабочую директорию в контейнере
WORKDIR /order

# Запускаем приложение под non-root пользователем
USER appuser

# Копируем скомпилированный бинарник из стадии builder
COPY --from=builder /order/app .

# Экспонируем порт HTTP-сервиса Weather API
EXPOSE 8080

# Устанавливаем команду запуска — запускаем наш бинарь
ENTRYPOINT ["./app"]