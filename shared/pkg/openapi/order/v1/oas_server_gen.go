// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CancelOrderById implements cancelOrderById operation.
	//
	// Отмена заказа.
	//
	// POST /api/v1/orders/{order_uuid}/cancel
	CancelOrderById(ctx context.Context, params CancelOrderByIdParams) (CancelOrderByIdRes, error)
	// CreateOrder implements createOrder operation.
	//
	// Создаёт новый заказ на основе выбранных
	// пользователем деталей.
	//
	// POST /api/v1/orders
	CreateOrder(ctx context.Context, req *CreateOrderRequest) (CreateOrderRes, error)
	// GetOrderByUuid implements getOrderByUuid operation.
	//
	// Получение заказа по его идентификатору.
	//
	// GET /api/v1/orders/{order_uuid}
	GetOrderByUuid(ctx context.Context, params GetOrderByUuidParams) (GetOrderByUuidRes, error)
	// PayOrderByUuid implements payOrderByUuid operation.
	//
	// Оплата заказа.
	//
	// POST /api/v1/orders/{order_uuid}/pay
	PayOrderByUuid(ctx context.Context, req *PayOrderRequest, params PayOrderByUuidParams) (PayOrderByUuidRes, error)
	// NewError creates *GenericErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *GenericErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
